name: "Rust build & test"

on:
  push:
    branches: [ 'master', 'develop' ]
  pull_request:
    branches: [ 'master', 'develop' ]

env:
  CARGO_TERM_COLOR: always
  SOURCE_PATH: "./src"

jobs:
  rust-build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, ubuntu-latest, windows-2022 ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          path: ${{ env.SOURCE_PATH }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: clippy
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: ${{ env.SOURCE_PATH }}
      - name: Install webkit/GTK dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get -y install libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            patchelf \
            librsvg2-dev
      - name: Install Trunk
        run: cargo install --locked trunk
      - name: Install Tauri
        run: cargo install tauri-cli --locked --version 1.0.0-rc.4

      - name: Windows CMD workaround
        run: trunk build --release --dist "./../src-tauri/websrc"
        if: runner.os == 'Windows'
        working-directory: "${{ env.SOURCE_PATH }}/cube_shuffle-wasm"
      - name: Tauri Build
        run: cargo tauri build
        working-directory: "${{ env.SOURCE_PATH }}/src-tauri"

      - uses: actions/upload-artifact@v2
        name: Tauri Linux executable
        if: runner.os == 'Linux'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}_EXECUTABLE
          path: "${{ env.SOURCE_PATH }}/target/release/cube-shuffle"
      - uses: actions/upload-artifact@v2
        name: Tauri Linux deb
        if: runner.os == 'Linux'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}.deb
          path: "${{ env.SOURCE_PATH }}/target/release/bundle/deb/cube-shuffle*.deb"
      - uses: actions/upload-artifact@v2
        name: Tauri Linux AppImage
        if: runner.os == 'Linux'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}.AppImage
          path: "${{ env.SOURCE_PATH }}/target/release/bundle/appimage/cube-shuffle*.AppImage"

      - uses: actions/upload-artifact@v2
        name: Tauri Windows Installer
        if: runner.os == 'Windows'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}.msi
          path: "${{ env.SOURCE_PATH }}/target/release/bundle/msi/CubeShuffle*.msi"

      - uses: actions/upload-artifact@v2
        name: Tauri macOS app
        if: runner.os == 'macOS'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}.app
          path: "${{ env.SOURCE_PATH }}/target/release/bundle/macos/CubeShuffle*.app"
      - uses: actions/upload-artifact@v2
        name: Tauri macOS dmg
        if: runner.os == 'macOS'
        with:
          if-no-files-found: error
          name: CubeShuffle-Tauri_${{ runner.os }}_${{ runner.arch }}.dmg
          path: "${{ env.SOURCE_PATH }}/target/release/bundle/dmg/CubeShuffle*.dmg"

      - name: Cargo build
        run: cargo build --verbose --locked --release
        working-directory: ${{ env.SOURCE_PATH }}
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --workspace --all-targets --manifest-path "${{ env.SOURCE_PATH }}/Cargo.toml"
      - name: Trunk build
        run: trunk build --release --dist "${{ github.workspace }}/wasm_build"
        working-directory: "${{ env.SOURCE_PATH }}/cube_shuffle-wasm"
      - uses: actions/upload-artifact@v2
        with:
          name: CubeShuffle-wasm_${{ matrix.platform }}
          if-no-files-found: error
          path: "${{ github.workspace }}/wasm_build"
      - name: Run tests
        run: cargo test --verbose --locked --release --no-fail-fast
        working-directory: ${{ env.SOURCE_PATH }}

  cli-build:
    strategy:
      fail-fast: false
      matrix:
        target: [
            x86_64-unknown-linux-gnu,
            aarch64-unknown-linux-musl,
            i686-unknown-linux-gnu,
            aarch64-unknown-linux-gnu,
            arm-unknown-linux-gnueabi,
            arm-unknown-linux-gnueabihf,
            armv7-unknown-linux-gnueabihf,
            riscv64gc-unknown-linux-gnu,
            x86_64-unknown-linux-musl,

            x86_64-pc-windows-msvc,
            i686-pc-windows-msvc,
            aarch64-pc-windows-msvc,

            x86_64-apple-darwin,
            aarch64-apple-darwin,

            x86_64-unknown-netbsd,
        ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          - target: x86_64-pc-windows-msvc
            os: windows-2022
            cross: false
          - target: i686-pc-windows-msvc
            os: windows-2022
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-2022
            cross: false

          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

          - target: x86_64-unknown-netbsd
            os: ubuntu-latest
            cross: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        name: Compile
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --bin cube_shuffle-cli --target ${{ matrix.target }} --target-dir "${{ github.workspace }}/cli_build"
      - uses: actions/upload-artifact@v2
        name: Upload binary
        if: runner.os != 'Windows'
        with:
          name: CubeShuffle-cli_${{ matrix.target }}
          if-no-files-found: error
          path: "${{ github.workspace }}/cli_build/${{ matrix.target }}/release/cube_shuffle-cli"
      - uses: actions/upload-artifact@v2
        name: Upload Windows binary
        if: runner.os == 'Windows'
        with:
          name: CubeShuffle-cli_${{ matrix.target }}
          if-no-files-found: error
          path: "${{ github.workspace }}\\cli_build\\${{ matrix.target }}\\release\\cube_shuffle-cli.exe"

  cordova-build:
    container:
      image: beevelop/cordova:latest
    runs-on: ubuntu-latest
    needs: [rust-build]
    steps:
      - name: Install Git
        run: apt-get -y update && apt-get -y install git
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          path: ${{ env.SOURCE_PATH }}
      - name: Download compiled WASM
        uses: actions/download-artifact@v2
        with:
          name: CubeShuffle-wasm_ubuntu-latest
          path: "${{ env.SOURCE_PATH }}/cube_shuffle-cordova/www"
      - name: Build Android
        working-directory: "${{ env.SOURCE_PATH }}/cube_shuffle-cordova"
        run: |
          cordova platform add android --no-telemetry --verbose
          cordova build android --device --release --no-telemetry --verbose
      - uses: actions/upload-artifact@v2
        with:
          name: CubeShuffle-Cordova-Android
          if-no-files-found: error
          path: "${{ env.SOURCE_PATH }}/cube_shuffle-cordova/platforms/android/app/build/outputs/bundle/release/app-release.aab"